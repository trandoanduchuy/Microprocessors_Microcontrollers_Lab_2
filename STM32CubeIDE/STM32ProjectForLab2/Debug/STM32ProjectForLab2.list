
STM32ProjectForLab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002810  08002810  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002810  08002810  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002810  08002810  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002810  08002810  00012810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000014  0800282c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  0800282c  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087b7  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001875  00000000  00000000  000287f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002a070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002aa38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001a48  00000000  00000000  0002b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1fd  00000000  00000000  0002cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008529a  00000000  00000000  00037f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bd207  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  000bd258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	080027d4 	.word	0x080027d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	080027d4 	.word	0x080027d4

0800014c <blink_led>:
/****************************************************************************************
FUNCTION DEFINITION
****************************************************************************************/
/* Function to blink led red*/
void blink_led(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(blink_status)
 8000150:	4b20      	ldr	r3, [pc, #128]	; (80001d4 <blink_led+0x88>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b02      	cmp	r3, #2
 8000156:	d024      	beq.n	80001a2 <blink_led+0x56>
 8000158:	2b02      	cmp	r3, #2
 800015a:	dc33      	bgt.n	80001c4 <blink_led+0x78>
 800015c:	2b00      	cmp	r3, #0
 800015e:	d002      	beq.n	8000166 <blink_led+0x1a>
 8000160:	2b01      	cmp	r3, #1
 8000162:	d00d      	beq.n	8000180 <blink_led+0x34>
			setTimer1(BLINK_ON_TIME);
			blink_status = BLINK_ON;
		}
		break;
	default:
		break;
 8000164:	e02e      	b.n	80001c4 <blink_led+0x78>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET); /* Turn off led red*/
 8000166:	2201      	movs	r2, #1
 8000168:	2120      	movs	r1, #32
 800016a:	481b      	ldr	r0, [pc, #108]	; (80001d8 <blink_led+0x8c>)
 800016c:	f001 fb28 	bl	80017c0 <HAL_GPIO_WritePin>
		blink_status = BLINK_ON;
 8000170:	4b18      	ldr	r3, [pc, #96]	; (80001d4 <blink_led+0x88>)
 8000172:	2201      	movs	r2, #1
 8000174:	701a      	strb	r2, [r3, #0]
		setTimer1(BLINK_ON_TIME);
 8000176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800017a:	f000 fee7 	bl	8000f4c <setTimer1>
		break;
 800017e:	e026      	b.n	80001ce <blink_led+0x82>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2120      	movs	r1, #32
 8000184:	4814      	ldr	r0, [pc, #80]	; (80001d8 <blink_led+0x8c>)
 8000186:	f001 fb1b 	bl	80017c0 <HAL_GPIO_WritePin>
		if(timer1_flag == 1)
 800018a:	4b14      	ldr	r3, [pc, #80]	; (80001dc <blink_led+0x90>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d11a      	bne.n	80001c8 <blink_led+0x7c>
			setTimer1(BLINK_OFF_TIME);
 8000192:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000196:	f000 fed9 	bl	8000f4c <setTimer1>
			blink_status = BLINK_OFF;
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <blink_led+0x88>)
 800019c:	2202      	movs	r2, #2
 800019e:	701a      	strb	r2, [r3, #0]
		break;
 80001a0:	e012      	b.n	80001c8 <blink_led+0x7c>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80001a2:	2201      	movs	r2, #1
 80001a4:	2120      	movs	r1, #32
 80001a6:	480c      	ldr	r0, [pc, #48]	; (80001d8 <blink_led+0x8c>)
 80001a8:	f001 fb0a 	bl	80017c0 <HAL_GPIO_WritePin>
		if(timer1_flag == 1)
 80001ac:	4b0b      	ldr	r3, [pc, #44]	; (80001dc <blink_led+0x90>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d10b      	bne.n	80001cc <blink_led+0x80>
			setTimer1(BLINK_ON_TIME);
 80001b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b8:	f000 fec8 	bl	8000f4c <setTimer1>
			blink_status = BLINK_ON;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <blink_led+0x88>)
 80001be:	2201      	movs	r2, #1
 80001c0:	701a      	strb	r2, [r3, #0]
		break;
 80001c2:	e003      	b.n	80001cc <blink_led+0x80>
		break;
 80001c4:	bf00      	nop
 80001c6:	e002      	b.n	80001ce <blink_led+0x82>
		break;
 80001c8:	bf00      	nop
 80001ca:	e000      	b.n	80001ce <blink_led+0x82>
		break;
 80001cc:	bf00      	nop
	}
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	20000030 	.word	0x20000030
 80001d8:	40010800 	.word	0x40010800
 80001dc:	20000080 	.word	0x20000080

080001e0 <updateLEDMatrix>:
unsigned char matrix_buffer[8] = {0xEF, 0x03, 0xED, 0xEE, 0xEE, 0xED, 0x03, 0xEF};

LED_MATRIX_STATUS led_matrix_status = LED_MATRIX_INIT;

void updateLEDMatrix(int index)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b082      	sub	sp, #8
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
	switch(index)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2b07      	cmp	r3, #7
 80001ec:	f200 84b8 	bhi.w	8000b60 <updateLEDMatrix+0x980>
 80001f0:	a201      	add	r2, pc, #4	; (adr r2, 80001f8 <updateLEDMatrix+0x18>)
 80001f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f6:	bf00      	nop
 80001f8:	08000219 	.word	0x08000219
 80001fc:	0800033f 	.word	0x0800033f
 8000200:	08000471 	.word	0x08000471
 8000204:	08000595 	.word	0x08000595
 8000208:	080006c5 	.word	0x080006c5
 800020c:	080007e9 	.word	0x080007e9
 8000210:	08000919 	.word	0x08000919
 8000214:	08000a3d 	.word	0x08000a3d
	{
	case 0:
		/* Turn on col 0 with matrix_buffer[0], to turn on col -> reset*/
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2104      	movs	r1, #4
 800021c:	4891      	ldr	r0, [pc, #580]	; (8000464 <updateLEDMatrix+0x284>)
 800021e:	f001 facf 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000222:	2201      	movs	r2, #1
 8000224:	2108      	movs	r1, #8
 8000226:	488f      	ldr	r0, [pc, #572]	; (8000464 <updateLEDMatrix+0x284>)
 8000228:	f001 faca 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 800022c:	2201      	movs	r2, #1
 800022e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000232:	488c      	ldr	r0, [pc, #560]	; (8000464 <updateLEDMatrix+0x284>)
 8000234:	f001 fac4 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000238:	2201      	movs	r2, #1
 800023a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023e:	4889      	ldr	r0, [pc, #548]	; (8000464 <updateLEDMatrix+0x284>)
 8000240:	f001 fabe 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000244:	2201      	movs	r2, #1
 8000246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800024a:	4886      	ldr	r0, [pc, #536]	; (8000464 <updateLEDMatrix+0x284>)
 800024c:	f001 fab8 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000256:	4883      	ldr	r0, [pc, #524]	; (8000464 <updateLEDMatrix+0x284>)
 8000258:	f001 fab2 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 800025c:	2201      	movs	r2, #1
 800025e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000262:	4880      	ldr	r0, [pc, #512]	; (8000464 <updateLEDMatrix+0x284>)
 8000264:	f001 faac 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000268:	2201      	movs	r2, #1
 800026a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800026e:	487d      	ldr	r0, [pc, #500]	; (8000464 <updateLEDMatrix+0x284>)
 8000270:	f001 faa6 	bl	80017c0 <HAL_GPIO_WritePin>

		/* Turn on rows based on buffer_matrix[0], to turn on row -> reset*/
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[0] >> 0) & 0x01));
 8000274:	4b7c      	ldr	r3, [pc, #496]	; (8000468 <updateLEDMatrix+0x288>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	b2db      	uxtb	r3, r3
 800027e:	461a      	mov	r2, r3
 8000280:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000284:	4879      	ldr	r0, [pc, #484]	; (800046c <updateLEDMatrix+0x28c>)
 8000286:	f001 fa9b 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[0] >> 1) & 0x01));
 800028a:	4b77      	ldr	r3, [pc, #476]	; (8000468 <updateLEDMatrix+0x288>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	085b      	lsrs	r3, r3, #1
 8000290:	b2db      	uxtb	r3, r3
 8000292:	f003 0301 	and.w	r3, r3, #1
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800029e:	4873      	ldr	r0, [pc, #460]	; (800046c <updateLEDMatrix+0x28c>)
 80002a0:	f001 fa8e 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[0] >> 2) & 0x01));
 80002a4:	4b70      	ldr	r3, [pc, #448]	; (8000468 <updateLEDMatrix+0x288>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	089b      	lsrs	r3, r3, #2
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 0301 	and.w	r3, r3, #1
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	461a      	mov	r2, r3
 80002b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b8:	486c      	ldr	r0, [pc, #432]	; (800046c <updateLEDMatrix+0x28c>)
 80002ba:	f001 fa81 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[0] >> 3) & 0x01));
 80002be:	4b6a      	ldr	r3, [pc, #424]	; (8000468 <updateLEDMatrix+0x288>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	08db      	lsrs	r3, r3, #3
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	f003 0301 	and.w	r3, r3, #1
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	461a      	mov	r2, r3
 80002ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002d2:	4866      	ldr	r0, [pc, #408]	; (800046c <updateLEDMatrix+0x28c>)
 80002d4:	f001 fa74 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[0] >> 4) & 0x01));
 80002d8:	4b63      	ldr	r3, [pc, #396]	; (8000468 <updateLEDMatrix+0x288>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	091b      	lsrs	r3, r3, #4
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f003 0301 	and.w	r3, r3, #1
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	461a      	mov	r2, r3
 80002e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ec:	485f      	ldr	r0, [pc, #380]	; (800046c <updateLEDMatrix+0x28c>)
 80002ee:	f001 fa67 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[0] >> 5) & 0x01));
 80002f2:	4b5d      	ldr	r3, [pc, #372]	; (8000468 <updateLEDMatrix+0x288>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	095b      	lsrs	r3, r3, #5
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	461a      	mov	r2, r3
 8000302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000306:	4859      	ldr	r0, [pc, #356]	; (800046c <updateLEDMatrix+0x28c>)
 8000308:	f001 fa5a 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[0] >> 6) & 0x01));
 800030c:	4b56      	ldr	r3, [pc, #344]	; (8000468 <updateLEDMatrix+0x288>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	099b      	lsrs	r3, r3, #6
 8000312:	b2db      	uxtb	r3, r3
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	461a      	mov	r2, r3
 800031c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000320:	4852      	ldr	r0, [pc, #328]	; (800046c <updateLEDMatrix+0x28c>)
 8000322:	f001 fa4d 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[0] >> 7) & 0x01));
 8000326:	4b50      	ldr	r3, [pc, #320]	; (8000468 <updateLEDMatrix+0x288>)
 8000328:	781b      	ldrb	r3, [r3, #0]
 800032a:	09db      	lsrs	r3, r3, #7
 800032c:	b2db      	uxtb	r3, r3
 800032e:	461a      	mov	r2, r3
 8000330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000334:	484d      	ldr	r0, [pc, #308]	; (800046c <updateLEDMatrix+0x28c>)
 8000336:	f001 fa43 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 800033a:	f000 bc40 	b.w	8000bbe <updateLEDMatrix+0x9de>
	case 1:
		/* Turn on col 0 with matrix_buffer[0], to turn on col -> reset*/
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 800033e:	2201      	movs	r2, #1
 8000340:	2104      	movs	r1, #4
 8000342:	4848      	ldr	r0, [pc, #288]	; (8000464 <updateLEDMatrix+0x284>)
 8000344:	f001 fa3c 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000348:	2200      	movs	r2, #0
 800034a:	2108      	movs	r1, #8
 800034c:	4845      	ldr	r0, [pc, #276]	; (8000464 <updateLEDMatrix+0x284>)
 800034e:	f001 fa37 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000358:	4842      	ldr	r0, [pc, #264]	; (8000464 <updateLEDMatrix+0x284>)
 800035a:	f001 fa31 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000364:	483f      	ldr	r0, [pc, #252]	; (8000464 <updateLEDMatrix+0x284>)
 8000366:	f001 fa2b 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000370:	483c      	ldr	r0, [pc, #240]	; (8000464 <updateLEDMatrix+0x284>)
 8000372:	f001 fa25 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037c:	4839      	ldr	r0, [pc, #228]	; (8000464 <updateLEDMatrix+0x284>)
 800037e:	f001 fa1f 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000382:	2201      	movs	r2, #1
 8000384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000388:	4836      	ldr	r0, [pc, #216]	; (8000464 <updateLEDMatrix+0x284>)
 800038a:	f001 fa19 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000394:	4833      	ldr	r0, [pc, #204]	; (8000464 <updateLEDMatrix+0x284>)
 8000396:	f001 fa13 	bl	80017c0 <HAL_GPIO_WritePin>

		/* Turn on rows based on buffer_matrix[0], to turn on row -> reset*/
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[1] >> 0) & 0x01));
 800039a:	4b33      	ldr	r3, [pc, #204]	; (8000468 <updateLEDMatrix+0x288>)
 800039c:	785b      	ldrb	r3, [r3, #1]
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	461a      	mov	r2, r3
 80003a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003aa:	4830      	ldr	r0, [pc, #192]	; (800046c <updateLEDMatrix+0x28c>)
 80003ac:	f001 fa08 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[1] >> 1) & 0x01));
 80003b0:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <updateLEDMatrix+0x288>)
 80003b2:	785b      	ldrb	r3, [r3, #1]
 80003b4:	085b      	lsrs	r3, r3, #1
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c4:	4829      	ldr	r0, [pc, #164]	; (800046c <updateLEDMatrix+0x28c>)
 80003c6:	f001 f9fb 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[1] >> 2) & 0x01));
 80003ca:	4b27      	ldr	r3, [pc, #156]	; (8000468 <updateLEDMatrix+0x288>)
 80003cc:	785b      	ldrb	r3, [r3, #1]
 80003ce:	089b      	lsrs	r3, r3, #2
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	f003 0301 	and.w	r3, r3, #1
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	461a      	mov	r2, r3
 80003da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003de:	4823      	ldr	r0, [pc, #140]	; (800046c <updateLEDMatrix+0x28c>)
 80003e0:	f001 f9ee 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[1] >> 3) & 0x01));
 80003e4:	4b20      	ldr	r3, [pc, #128]	; (8000468 <updateLEDMatrix+0x288>)
 80003e6:	785b      	ldrb	r3, [r3, #1]
 80003e8:	08db      	lsrs	r3, r3, #3
 80003ea:	b2db      	uxtb	r3, r3
 80003ec:	f003 0301 	and.w	r3, r3, #1
 80003f0:	b2db      	uxtb	r3, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003f8:	481c      	ldr	r0, [pc, #112]	; (800046c <updateLEDMatrix+0x28c>)
 80003fa:	f001 f9e1 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[1] >> 4) & 0x01));
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <updateLEDMatrix+0x288>)
 8000400:	785b      	ldrb	r3, [r3, #1]
 8000402:	091b      	lsrs	r3, r3, #4
 8000404:	b2db      	uxtb	r3, r3
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	b2db      	uxtb	r3, r3
 800040c:	461a      	mov	r2, r3
 800040e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000412:	4816      	ldr	r0, [pc, #88]	; (800046c <updateLEDMatrix+0x28c>)
 8000414:	f001 f9d4 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[1] >> 5) & 0x01));
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <updateLEDMatrix+0x288>)
 800041a:	785b      	ldrb	r3, [r3, #1]
 800041c:	095b      	lsrs	r3, r3, #5
 800041e:	b2db      	uxtb	r3, r3
 8000420:	f003 0301 	and.w	r3, r3, #1
 8000424:	b2db      	uxtb	r3, r3
 8000426:	461a      	mov	r2, r3
 8000428:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800042c:	480f      	ldr	r0, [pc, #60]	; (800046c <updateLEDMatrix+0x28c>)
 800042e:	f001 f9c7 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[1] >> 6) & 0x01));
 8000432:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <updateLEDMatrix+0x288>)
 8000434:	785b      	ldrb	r3, [r3, #1]
 8000436:	099b      	lsrs	r3, r3, #6
 8000438:	b2db      	uxtb	r3, r3
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000446:	4809      	ldr	r0, [pc, #36]	; (800046c <updateLEDMatrix+0x28c>)
 8000448:	f001 f9ba 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[1] >> 7) & 0x01));
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <updateLEDMatrix+0x288>)
 800044e:	785b      	ldrb	r3, [r3, #1]
 8000450:	09db      	lsrs	r3, r3, #7
 8000452:	b2db      	uxtb	r3, r3
 8000454:	461a      	mov	r2, r3
 8000456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800045a:	4804      	ldr	r0, [pc, #16]	; (800046c <updateLEDMatrix+0x28c>)
 800045c:	f001 f9b0 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 8000460:	e3ad      	b.n	8000bbe <updateLEDMatrix+0x9de>
 8000462:	bf00      	nop
 8000464:	40010800 	.word	0x40010800
 8000468:	20000000 	.word	0x20000000
 800046c:	40010c00 	.word	0x40010c00
	case 2:
		/* Turn on col 0 with matrix_buffer[0], to turn on col -> reset*/
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2104      	movs	r1, #4
 8000474:	4890      	ldr	r0, [pc, #576]	; (80006b8 <updateLEDMatrix+0x4d8>)
 8000476:	f001 f9a3 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 800047a:	2201      	movs	r2, #1
 800047c:	2108      	movs	r1, #8
 800047e:	488e      	ldr	r0, [pc, #568]	; (80006b8 <updateLEDMatrix+0x4d8>)
 8000480:	f001 f99e 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800048a:	488b      	ldr	r0, [pc, #556]	; (80006b8 <updateLEDMatrix+0x4d8>)
 800048c:	f001 f998 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000496:	4888      	ldr	r0, [pc, #544]	; (80006b8 <updateLEDMatrix+0x4d8>)
 8000498:	f001 f992 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 800049c:	2201      	movs	r2, #1
 800049e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004a2:	4885      	ldr	r0, [pc, #532]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80004a4:	f001 f98c 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 80004a8:	2201      	movs	r2, #1
 80004aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ae:	4882      	ldr	r0, [pc, #520]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80004b0:	f001 f986 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004ba:	487f      	ldr	r0, [pc, #508]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80004bc:	f001 f980 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80004c0:	2201      	movs	r2, #1
 80004c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c6:	487c      	ldr	r0, [pc, #496]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80004c8:	f001 f97a 	bl	80017c0 <HAL_GPIO_WritePin>

		/* Turn on rows based on buffer_matrix[0], to turn on row -> reset*/
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[2] >> 0) & 0x01));
 80004cc:	4b7b      	ldr	r3, [pc, #492]	; (80006bc <updateLEDMatrix+0x4dc>)
 80004ce:	789b      	ldrb	r3, [r3, #2]
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	461a      	mov	r2, r3
 80004d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004dc:	4878      	ldr	r0, [pc, #480]	; (80006c0 <updateLEDMatrix+0x4e0>)
 80004de:	f001 f96f 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[2] >> 1) & 0x01));
 80004e2:	4b76      	ldr	r3, [pc, #472]	; (80006bc <updateLEDMatrix+0x4dc>)
 80004e4:	789b      	ldrb	r3, [r3, #2]
 80004e6:	085b      	lsrs	r3, r3, #1
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f6:	4872      	ldr	r0, [pc, #456]	; (80006c0 <updateLEDMatrix+0x4e0>)
 80004f8:	f001 f962 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[2] >> 2) & 0x01));
 80004fc:	4b6f      	ldr	r3, [pc, #444]	; (80006bc <updateLEDMatrix+0x4dc>)
 80004fe:	789b      	ldrb	r3, [r3, #2]
 8000500:	089b      	lsrs	r3, r3, #2
 8000502:	b2db      	uxtb	r3, r3
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000510:	486b      	ldr	r0, [pc, #428]	; (80006c0 <updateLEDMatrix+0x4e0>)
 8000512:	f001 f955 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[2] >> 3) & 0x01));
 8000516:	4b69      	ldr	r3, [pc, #420]	; (80006bc <updateLEDMatrix+0x4dc>)
 8000518:	789b      	ldrb	r3, [r3, #2]
 800051a:	08db      	lsrs	r3, r3, #3
 800051c:	b2db      	uxtb	r3, r3
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	461a      	mov	r2, r3
 8000526:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800052a:	4865      	ldr	r0, [pc, #404]	; (80006c0 <updateLEDMatrix+0x4e0>)
 800052c:	f001 f948 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[2] >> 4) & 0x01));
 8000530:	4b62      	ldr	r3, [pc, #392]	; (80006bc <updateLEDMatrix+0x4dc>)
 8000532:	789b      	ldrb	r3, [r3, #2]
 8000534:	091b      	lsrs	r3, r3, #4
 8000536:	b2db      	uxtb	r3, r3
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000544:	485e      	ldr	r0, [pc, #376]	; (80006c0 <updateLEDMatrix+0x4e0>)
 8000546:	f001 f93b 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[2] >> 5) & 0x01));
 800054a:	4b5c      	ldr	r3, [pc, #368]	; (80006bc <updateLEDMatrix+0x4dc>)
 800054c:	789b      	ldrb	r3, [r3, #2]
 800054e:	095b      	lsrs	r3, r3, #5
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	4858      	ldr	r0, [pc, #352]	; (80006c0 <updateLEDMatrix+0x4e0>)
 8000560:	f001 f92e 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[2] >> 6) & 0x01));
 8000564:	4b55      	ldr	r3, [pc, #340]	; (80006bc <updateLEDMatrix+0x4dc>)
 8000566:	789b      	ldrb	r3, [r3, #2]
 8000568:	099b      	lsrs	r3, r3, #6
 800056a:	b2db      	uxtb	r3, r3
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	b2db      	uxtb	r3, r3
 8000572:	461a      	mov	r2, r3
 8000574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000578:	4851      	ldr	r0, [pc, #324]	; (80006c0 <updateLEDMatrix+0x4e0>)
 800057a:	f001 f921 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[2] >> 7) & 0x01));
 800057e:	4b4f      	ldr	r3, [pc, #316]	; (80006bc <updateLEDMatrix+0x4dc>)
 8000580:	789b      	ldrb	r3, [r3, #2]
 8000582:	09db      	lsrs	r3, r3, #7
 8000584:	b2db      	uxtb	r3, r3
 8000586:	461a      	mov	r2, r3
 8000588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058c:	484c      	ldr	r0, [pc, #304]	; (80006c0 <updateLEDMatrix+0x4e0>)
 800058e:	f001 f917 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 8000592:	e314      	b.n	8000bbe <updateLEDMatrix+0x9de>
	case 3:
		/* Turn on col 0 with matrix_buffer[0], to turn on col -> reset*/
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2104      	movs	r1, #4
 8000598:	4847      	ldr	r0, [pc, #284]	; (80006b8 <updateLEDMatrix+0x4d8>)
 800059a:	f001 f911 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2108      	movs	r1, #8
 80005a2:	4845      	ldr	r0, [pc, #276]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80005a4:	f001 f90c 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ae:	4842      	ldr	r0, [pc, #264]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80005b0:	f001 f906 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ba:	483f      	ldr	r0, [pc, #252]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80005bc:	f001 f900 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c6:	483c      	ldr	r0, [pc, #240]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80005c8:	f001 f8fa 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	4839      	ldr	r0, [pc, #228]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80005d4:	f001 f8f4 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005de:	4836      	ldr	r0, [pc, #216]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80005e0:	f001 f8ee 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ea:	4833      	ldr	r0, [pc, #204]	; (80006b8 <updateLEDMatrix+0x4d8>)
 80005ec:	f001 f8e8 	bl	80017c0 <HAL_GPIO_WritePin>

		/* Turn on rows based on buffer_matrix[0], to turn on row -> reset*/
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[3] >> 0) & 0x01));
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <updateLEDMatrix+0x4dc>)
 80005f2:	78db      	ldrb	r3, [r3, #3]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	461a      	mov	r2, r3
 80005fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000600:	482f      	ldr	r0, [pc, #188]	; (80006c0 <updateLEDMatrix+0x4e0>)
 8000602:	f001 f8dd 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[3] >> 1) & 0x01));
 8000606:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <updateLEDMatrix+0x4dc>)
 8000608:	78db      	ldrb	r3, [r3, #3]
 800060a:	085b      	lsrs	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	461a      	mov	r2, r3
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	4829      	ldr	r0, [pc, #164]	; (80006c0 <updateLEDMatrix+0x4e0>)
 800061c:	f001 f8d0 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[3] >> 2) & 0x01));
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <updateLEDMatrix+0x4dc>)
 8000622:	78db      	ldrb	r3, [r3, #3]
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 0301 	and.w	r3, r3, #1
 800062c:	b2db      	uxtb	r3, r3
 800062e:	461a      	mov	r2, r3
 8000630:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000634:	4822      	ldr	r0, [pc, #136]	; (80006c0 <updateLEDMatrix+0x4e0>)
 8000636:	f001 f8c3 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[3] >> 3) & 0x01));
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <updateLEDMatrix+0x4dc>)
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	08db      	lsrs	r3, r3, #3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064e:	481c      	ldr	r0, [pc, #112]	; (80006c0 <updateLEDMatrix+0x4e0>)
 8000650:	f001 f8b6 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[3] >> 4) & 0x01));
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <updateLEDMatrix+0x4dc>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	091b      	lsrs	r3, r3, #4
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	b2db      	uxtb	r3, r3
 8000662:	461a      	mov	r2, r3
 8000664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000668:	4815      	ldr	r0, [pc, #84]	; (80006c0 <updateLEDMatrix+0x4e0>)
 800066a:	f001 f8a9 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[3] >> 5) & 0x01));
 800066e:	4b13      	ldr	r3, [pc, #76]	; (80006bc <updateLEDMatrix+0x4dc>)
 8000670:	78db      	ldrb	r3, [r3, #3]
 8000672:	095b      	lsrs	r3, r3, #5
 8000674:	b2db      	uxtb	r3, r3
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000682:	480f      	ldr	r0, [pc, #60]	; (80006c0 <updateLEDMatrix+0x4e0>)
 8000684:	f001 f89c 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[3] >> 6) & 0x01));
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <updateLEDMatrix+0x4dc>)
 800068a:	78db      	ldrb	r3, [r3, #3]
 800068c:	099b      	lsrs	r3, r3, #6
 800068e:	b2db      	uxtb	r3, r3
 8000690:	f003 0301 	and.w	r3, r3, #1
 8000694:	b2db      	uxtb	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069c:	4808      	ldr	r0, [pc, #32]	; (80006c0 <updateLEDMatrix+0x4e0>)
 800069e:	f001 f88f 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[3] >> 7) & 0x01));
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <updateLEDMatrix+0x4dc>)
 80006a4:	78db      	ldrb	r3, [r3, #3]
 80006a6:	09db      	lsrs	r3, r3, #7
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	461a      	mov	r2, r3
 80006ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <updateLEDMatrix+0x4e0>)
 80006b2:	f001 f885 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 80006b6:	e282      	b.n	8000bbe <updateLEDMatrix+0x9de>
 80006b8:	40010800 	.word	0x40010800
 80006bc:	20000000 	.word	0x20000000
 80006c0:	40010c00 	.word	0x40010c00
	case 4:
		/* Turn on col 0 with matrix_buffer[0], to turn on col -> reset*/
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2104      	movs	r1, #4
 80006c8:	4890      	ldr	r0, [pc, #576]	; (800090c <updateLEDMatrix+0x72c>)
 80006ca:	f001 f879 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2108      	movs	r1, #8
 80006d2:	488e      	ldr	r0, [pc, #568]	; (800090c <updateLEDMatrix+0x72c>)
 80006d4:	f001 f874 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006de:	488b      	ldr	r0, [pc, #556]	; (800090c <updateLEDMatrix+0x72c>)
 80006e0:	f001 f86e 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ea:	4888      	ldr	r0, [pc, #544]	; (800090c <updateLEDMatrix+0x72c>)
 80006ec:	f001 f868 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f6:	4885      	ldr	r0, [pc, #532]	; (800090c <updateLEDMatrix+0x72c>)
 80006f8:	f001 f862 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000702:	4882      	ldr	r0, [pc, #520]	; (800090c <updateLEDMatrix+0x72c>)
 8000704:	f001 f85c 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070e:	487f      	ldr	r0, [pc, #508]	; (800090c <updateLEDMatrix+0x72c>)
 8000710:	f001 f856 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800071a:	487c      	ldr	r0, [pc, #496]	; (800090c <updateLEDMatrix+0x72c>)
 800071c:	f001 f850 	bl	80017c0 <HAL_GPIO_WritePin>

		/* Turn on rows based on buffer_matrix[0], to turn on row -> reset*/
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[4] >> 0) & 0x01));
 8000720:	4b7b      	ldr	r3, [pc, #492]	; (8000910 <updateLEDMatrix+0x730>)
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	461a      	mov	r2, r3
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	4878      	ldr	r0, [pc, #480]	; (8000914 <updateLEDMatrix+0x734>)
 8000732:	f001 f845 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[4] >> 1) & 0x01));
 8000736:	4b76      	ldr	r3, [pc, #472]	; (8000910 <updateLEDMatrix+0x730>)
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	085b      	lsrs	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074a:	4872      	ldr	r0, [pc, #456]	; (8000914 <updateLEDMatrix+0x734>)
 800074c:	f001 f838 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[4] >> 2) & 0x01));
 8000750:	4b6f      	ldr	r3, [pc, #444]	; (8000910 <updateLEDMatrix+0x730>)
 8000752:	791b      	ldrb	r3, [r3, #4]
 8000754:	089b      	lsrs	r3, r3, #2
 8000756:	b2db      	uxtb	r3, r3
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000764:	486b      	ldr	r0, [pc, #428]	; (8000914 <updateLEDMatrix+0x734>)
 8000766:	f001 f82b 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[4] >> 3) & 0x01));
 800076a:	4b69      	ldr	r3, [pc, #420]	; (8000910 <updateLEDMatrix+0x730>)
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	08db      	lsrs	r3, r3, #3
 8000770:	b2db      	uxtb	r3, r3
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800077e:	4865      	ldr	r0, [pc, #404]	; (8000914 <updateLEDMatrix+0x734>)
 8000780:	f001 f81e 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[4] >> 4) & 0x01));
 8000784:	4b62      	ldr	r3, [pc, #392]	; (8000910 <updateLEDMatrix+0x730>)
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	091b      	lsrs	r3, r3, #4
 800078a:	b2db      	uxtb	r3, r3
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000798:	485e      	ldr	r0, [pc, #376]	; (8000914 <updateLEDMatrix+0x734>)
 800079a:	f001 f811 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[4] >> 5) & 0x01));
 800079e:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <updateLEDMatrix+0x730>)
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	095b      	lsrs	r3, r3, #5
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	461a      	mov	r2, r3
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	4858      	ldr	r0, [pc, #352]	; (8000914 <updateLEDMatrix+0x734>)
 80007b4:	f001 f804 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[4] >> 6) & 0x01));
 80007b8:	4b55      	ldr	r3, [pc, #340]	; (8000910 <updateLEDMatrix+0x730>)
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	099b      	lsrs	r3, r3, #6
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007cc:	4851      	ldr	r0, [pc, #324]	; (8000914 <updateLEDMatrix+0x734>)
 80007ce:	f000 fff7 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[4] >> 7) & 0x01));
 80007d2:	4b4f      	ldr	r3, [pc, #316]	; (8000910 <updateLEDMatrix+0x730>)
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	09db      	lsrs	r3, r3, #7
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	461a      	mov	r2, r3
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	484c      	ldr	r0, [pc, #304]	; (8000914 <updateLEDMatrix+0x734>)
 80007e2:	f000 ffed 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 80007e6:	e1ea      	b.n	8000bbe <updateLEDMatrix+0x9de>
	case 5:
		/* Turn on col 0 with matrix_buffer[0], to turn on col -> reset*/
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2104      	movs	r1, #4
 80007ec:	4847      	ldr	r0, [pc, #284]	; (800090c <updateLEDMatrix+0x72c>)
 80007ee:	f000 ffe7 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 80007f2:	2201      	movs	r2, #1
 80007f4:	2108      	movs	r1, #8
 80007f6:	4845      	ldr	r0, [pc, #276]	; (800090c <updateLEDMatrix+0x72c>)
 80007f8:	f000 ffe2 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000802:	4842      	ldr	r0, [pc, #264]	; (800090c <updateLEDMatrix+0x72c>)
 8000804:	f000 ffdc 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080e:	483f      	ldr	r0, [pc, #252]	; (800090c <updateLEDMatrix+0x72c>)
 8000810:	f000 ffd6 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081a:	483c      	ldr	r0, [pc, #240]	; (800090c <updateLEDMatrix+0x72c>)
 800081c:	f000 ffd0 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000826:	4839      	ldr	r0, [pc, #228]	; (800090c <updateLEDMatrix+0x72c>)
 8000828:	f000 ffca 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000832:	4836      	ldr	r0, [pc, #216]	; (800090c <updateLEDMatrix+0x72c>)
 8000834:	f000 ffc4 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083e:	4833      	ldr	r0, [pc, #204]	; (800090c <updateLEDMatrix+0x72c>)
 8000840:	f000 ffbe 	bl	80017c0 <HAL_GPIO_WritePin>

		/* Turn on rows based on buffer_matrix[0], to turn on row -> reset*/
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[5] >> 0) & 0x01));
 8000844:	4b32      	ldr	r3, [pc, #200]	; (8000910 <updateLEDMatrix+0x730>)
 8000846:	795b      	ldrb	r3, [r3, #5]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2db      	uxtb	r3, r3
 800084e:	461a      	mov	r2, r3
 8000850:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000854:	482f      	ldr	r0, [pc, #188]	; (8000914 <updateLEDMatrix+0x734>)
 8000856:	f000 ffb3 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[5] >> 1) & 0x01));
 800085a:	4b2d      	ldr	r3, [pc, #180]	; (8000910 <updateLEDMatrix+0x730>)
 800085c:	795b      	ldrb	r3, [r3, #5]
 800085e:	085b      	lsrs	r3, r3, #1
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800086e:	4829      	ldr	r0, [pc, #164]	; (8000914 <updateLEDMatrix+0x734>)
 8000870:	f000 ffa6 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[5] >> 2) & 0x01));
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <updateLEDMatrix+0x730>)
 8000876:	795b      	ldrb	r3, [r3, #5]
 8000878:	089b      	lsrs	r3, r3, #2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000888:	4822      	ldr	r0, [pc, #136]	; (8000914 <updateLEDMatrix+0x734>)
 800088a:	f000 ff99 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[5] >> 3) & 0x01));
 800088e:	4b20      	ldr	r3, [pc, #128]	; (8000910 <updateLEDMatrix+0x730>)
 8000890:	795b      	ldrb	r3, [r3, #5]
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
 800089c:	461a      	mov	r2, r3
 800089e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a2:	481c      	ldr	r0, [pc, #112]	; (8000914 <updateLEDMatrix+0x734>)
 80008a4:	f000 ff8c 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[5] >> 4) & 0x01));
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <updateLEDMatrix+0x730>)
 80008aa:	795b      	ldrb	r3, [r3, #5]
 80008ac:	091b      	lsrs	r3, r3, #4
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 0301 	and.w	r3, r3, #1
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	461a      	mov	r2, r3
 80008b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008bc:	4815      	ldr	r0, [pc, #84]	; (8000914 <updateLEDMatrix+0x734>)
 80008be:	f000 ff7f 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[5] >> 5) & 0x01));
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <updateLEDMatrix+0x730>)
 80008c4:	795b      	ldrb	r3, [r3, #5]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	461a      	mov	r2, r3
 80008d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <updateLEDMatrix+0x734>)
 80008d8:	f000 ff72 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[5] >> 6) & 0x01));
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <updateLEDMatrix+0x730>)
 80008de:	795b      	ldrb	r3, [r3, #5]
 80008e0:	099b      	lsrs	r3, r3, #6
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <updateLEDMatrix+0x734>)
 80008f2:	f000 ff65 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[5] >> 7) & 0x01));
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <updateLEDMatrix+0x730>)
 80008f8:	795b      	ldrb	r3, [r3, #5]
 80008fa:	09db      	lsrs	r3, r3, #7
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	461a      	mov	r2, r3
 8000900:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <updateLEDMatrix+0x734>)
 8000906:	f000 ff5b 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 800090a:	e158      	b.n	8000bbe <updateLEDMatrix+0x9de>
 800090c:	40010800 	.word	0x40010800
 8000910:	20000000 	.word	0x20000000
 8000914:	40010c00 	.word	0x40010c00
	case 6:
		/* Turn on col 0 with matrix_buffer[0], to turn on col -> reset*/
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2104      	movs	r1, #4
 800091c:	48aa      	ldr	r0, [pc, #680]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 800091e:	f000 ff4f 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2108      	movs	r1, #8
 8000926:	48a8      	ldr	r0, [pc, #672]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000928:	f000 ff4a 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000932:	48a5      	ldr	r0, [pc, #660]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000934:	f000 ff44 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093e:	48a2      	ldr	r0, [pc, #648]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000940:	f000 ff3e 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800094a:	489f      	ldr	r0, [pc, #636]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 800094c:	f000 ff38 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000956:	489c      	ldr	r0, [pc, #624]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000958:	f000 ff32 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000962:	4899      	ldr	r0, [pc, #612]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000964:	f000 ff2c 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800096e:	4896      	ldr	r0, [pc, #600]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000970:	f000 ff26 	bl	80017c0 <HAL_GPIO_WritePin>

		/* Turn on rows based on buffer_matrix[0], to turn on row -> reset*/
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[6] >> 0) & 0x01));
 8000974:	4b95      	ldr	r3, [pc, #596]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000976:	799b      	ldrb	r3, [r3, #6]
 8000978:	f003 0301 	and.w	r3, r3, #1
 800097c:	b2db      	uxtb	r3, r3
 800097e:	461a      	mov	r2, r3
 8000980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000984:	4892      	ldr	r0, [pc, #584]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000986:	f000 ff1b 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[6] >> 1) & 0x01));
 800098a:	4b90      	ldr	r3, [pc, #576]	; (8000bcc <updateLEDMatrix+0x9ec>)
 800098c:	799b      	ldrb	r3, [r3, #6]
 800098e:	085b      	lsrs	r3, r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	b2db      	uxtb	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	488c      	ldr	r0, [pc, #560]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 80009a0:	f000 ff0e 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[6] >> 2) & 0x01));
 80009a4:	4b89      	ldr	r3, [pc, #548]	; (8000bcc <updateLEDMatrix+0x9ec>)
 80009a6:	799b      	ldrb	r3, [r3, #6]
 80009a8:	089b      	lsrs	r3, r3, #2
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b8:	4885      	ldr	r0, [pc, #532]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 80009ba:	f000 ff01 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[6] >> 3) & 0x01));
 80009be:	4b83      	ldr	r3, [pc, #524]	; (8000bcc <updateLEDMatrix+0x9ec>)
 80009c0:	799b      	ldrb	r3, [r3, #6]
 80009c2:	08db      	lsrs	r3, r3, #3
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	461a      	mov	r2, r3
 80009ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d2:	487f      	ldr	r0, [pc, #508]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 80009d4:	f000 fef4 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[6] >> 4) & 0x01));
 80009d8:	4b7c      	ldr	r3, [pc, #496]	; (8000bcc <updateLEDMatrix+0x9ec>)
 80009da:	799b      	ldrb	r3, [r3, #6]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ec:	4878      	ldr	r0, [pc, #480]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 80009ee:	f000 fee7 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[6] >> 5) & 0x01));
 80009f2:	4b76      	ldr	r3, [pc, #472]	; (8000bcc <updateLEDMatrix+0x9ec>)
 80009f4:	799b      	ldrb	r3, [r3, #6]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	461a      	mov	r2, r3
 8000a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a06:	4872      	ldr	r0, [pc, #456]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000a08:	f000 feda 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[6] >> 6) & 0x01));
 8000a0c:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000a0e:	799b      	ldrb	r3, [r3, #6]
 8000a10:	099b      	lsrs	r3, r3, #6
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a20:	486b      	ldr	r0, [pc, #428]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000a22:	f000 fecd 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[6] >> 7) & 0x01));
 8000a26:	4b69      	ldr	r3, [pc, #420]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000a28:	799b      	ldrb	r3, [r3, #6]
 8000a2a:	09db      	lsrs	r3, r3, #7
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a34:	4866      	ldr	r0, [pc, #408]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000a36:	f000 fec3 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 8000a3a:	e0c0      	b.n	8000bbe <updateLEDMatrix+0x9de>
	case 7:
		/* Turn on col 0 with matrix_buffer[0], to turn on col -> reset*/
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2104      	movs	r1, #4
 8000a40:	4861      	ldr	r0, [pc, #388]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000a42:	f000 febd 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2108      	movs	r1, #8
 8000a4a:	485f      	ldr	r0, [pc, #380]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000a4c:	f000 feb8 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a56:	485c      	ldr	r0, [pc, #368]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000a58:	f000 feb2 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	4859      	ldr	r0, [pc, #356]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000a64:	f000 feac 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	4856      	ldr	r0, [pc, #344]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000a70:	f000 fea6 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7a:	4853      	ldr	r0, [pc, #332]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000a7c:	f000 fea0 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a86:	4850      	ldr	r0, [pc, #320]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000a88:	f000 fe9a 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a92:	484d      	ldr	r0, [pc, #308]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000a94:	f000 fe94 	bl	80017c0 <HAL_GPIO_WritePin>

		/* Turn on rows based on buffer_matrix[0], to turn on row -> reset*/
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, ((matrix_buffer[7] >> 0) & 0x01));
 8000a98:	4b4c      	ldr	r3, [pc, #304]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000a9a:	79db      	ldrb	r3, [r3, #7]
 8000a9c:	f003 0301 	and.w	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	4849      	ldr	r0, [pc, #292]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000aaa:	f000 fe89 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, ((matrix_buffer[7] >> 1) & 0x01));
 8000aae:	4b47      	ldr	r3, [pc, #284]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000ab0:	79db      	ldrb	r3, [r3, #7]
 8000ab2:	085b      	lsrs	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	461a      	mov	r2, r3
 8000abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac2:	4843      	ldr	r0, [pc, #268]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000ac4:	f000 fe7c 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, ((matrix_buffer[7] >> 2) & 0x01));
 8000ac8:	4b40      	ldr	r3, [pc, #256]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000aca:	79db      	ldrb	r3, [r3, #7]
 8000acc:	089b      	lsrs	r3, r3, #2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000adc:	483c      	ldr	r0, [pc, #240]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000ade:	f000 fe6f 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, ((matrix_buffer[7] >> 3) & 0x01));
 8000ae2:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000ae4:	79db      	ldrb	r3, [r3, #7]
 8000ae6:	08db      	lsrs	r3, r3, #3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	461a      	mov	r2, r3
 8000af2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af6:	4836      	ldr	r0, [pc, #216]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000af8:	f000 fe62 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, ((matrix_buffer[7] >> 4) & 0x01));
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000afe:	79db      	ldrb	r3, [r3, #7]
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b10:	482f      	ldr	r0, [pc, #188]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000b12:	f000 fe55 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, ((matrix_buffer[7] >> 5) & 0x01));
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000b18:	79db      	ldrb	r3, [r3, #7]
 8000b1a:	095b      	lsrs	r3, r3, #5
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	461a      	mov	r2, r3
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	4829      	ldr	r0, [pc, #164]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000b2c:	f000 fe48 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, ((matrix_buffer[7] >> 6) & 0x01));
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000b32:	79db      	ldrb	r3, [r3, #7]
 8000b34:	099b      	lsrs	r3, r3, #6
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b44:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000b46:	f000 fe3b 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, ((matrix_buffer[7] >> 7) & 0x01));
 8000b4a:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <updateLEDMatrix+0x9ec>)
 8000b4c:	79db      	ldrb	r3, [r3, #7]
 8000b4e:	09db      	lsrs	r3, r3, #7
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b58:	481d      	ldr	r0, [pc, #116]	; (8000bd0 <updateLEDMatrix+0x9f0>)
 8000b5a:	f000 fe31 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 8000b5e:	e02e      	b.n	8000bbe <updateLEDMatrix+0x9de>
	default:
		/* Turn of all cols -> set all ENM*/
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	2104      	movs	r1, #4
 8000b64:	4818      	ldr	r0, [pc, #96]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000b66:	f000 fe2b 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	4816      	ldr	r0, [pc, #88]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000b70:	f000 fe26 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000b74:	2201      	movs	r2, #1
 8000b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b7a:	4813      	ldr	r0, [pc, #76]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000b7c:	f000 fe20 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b86:	4810      	ldr	r0, [pc, #64]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000b88:	f000 fe1a 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b92:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000b94:	f000 fe14 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9e:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000ba0:	f000 fe0e 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000bac:	f000 fe08 	bl	80017c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <updateLEDMatrix+0x9e8>)
 8000bb8:	f000 fe02 	bl	80017c0 <HAL_GPIO_WritePin>
		break;
 8000bbc:	bf00      	nop
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	40010c00 	.word	0x40010c00

08000bd4 <LedMatrixDisplay>:


void LedMatrixDisplay(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
	switch(led_matrix_status)
 8000bd8:	4b57      	ldr	r3, [pc, #348]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b08      	cmp	r3, #8
 8000bde:	f200 8098 	bhi.w	8000d12 <LedMatrixDisplay+0x13e>
 8000be2:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <LedMatrixDisplay+0x14>)
 8000be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be8:	08000c0d 	.word	0x08000c0d
 8000bec:	08000c23 	.word	0x08000c23
 8000bf0:	08000c41 	.word	0x08000c41
 8000bf4:	08000c5f 	.word	0x08000c5f
 8000bf8:	08000c7d 	.word	0x08000c7d
 8000bfc:	08000c9b 	.word	0x08000c9b
 8000c00:	08000cb9 	.word	0x08000cb9
 8000c04:	08000cd7 	.word	0x08000cd7
 8000c08:	08000cf5 	.word	0x08000cf5
	{
	case LED_MATRIX_INIT:
		updateLEDMatrix(8); /* Turn off all cols*/
 8000c0c:	2008      	movs	r0, #8
 8000c0e:	f7ff fae7 	bl	80001e0 <updateLEDMatrix>
		led_matrix_status = COL0;
 8000c12:	4b49      	ldr	r3, [pc, #292]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
		setTimer2(DISPLAY_TIME_OF_A_COL);
 8000c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c1c:	f000 f9b2 	bl	8000f84 <setTimer2>
		break;
 8000c20:	e088      	b.n	8000d34 <LedMatrixDisplay+0x160>
	case COL0:
		updateLEDMatrix(0);	/* Turn on col 0*/
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff fadc 	bl	80001e0 <updateLEDMatrix>
		if(timer2_flag == 0)
 8000c28:	4b44      	ldr	r3, [pc, #272]	; (8000d3c <LedMatrixDisplay+0x168>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d172      	bne.n	8000d16 <LedMatrixDisplay+0x142>
		{
			setTimer2(DISPLAY_TIME_OF_A_COL);
 8000c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c34:	f000 f9a6 	bl	8000f84 <setTimer2>
			led_matrix_status = COL1;
 8000c38:	4b3f      	ldr	r3, [pc, #252]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c3e:	e06a      	b.n	8000d16 <LedMatrixDisplay+0x142>
	case COL1:
		updateLEDMatrix(1);	/* Turn on col 1*/
 8000c40:	2001      	movs	r0, #1
 8000c42:	f7ff facd 	bl	80001e0 <updateLEDMatrix>
		if(timer2_flag == 0)
 8000c46:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <LedMatrixDisplay+0x168>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d165      	bne.n	8000d1a <LedMatrixDisplay+0x146>
		{
			setTimer2(DISPLAY_TIME_OF_A_COL);
 8000c4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c52:	f000 f997 	bl	8000f84 <setTimer2>
			led_matrix_status = COL2;
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c5c:	e05d      	b.n	8000d1a <LedMatrixDisplay+0x146>
	case COL2:
		updateLEDMatrix(2);	/* Turn on col 2*/
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fabe 	bl	80001e0 <updateLEDMatrix>
		if(timer2_flag == 0)
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <LedMatrixDisplay+0x168>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d158      	bne.n	8000d1e <LedMatrixDisplay+0x14a>
		{
			setTimer2(DISPLAY_TIME_OF_A_COL);
 8000c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c70:	f000 f988 	bl	8000f84 <setTimer2>
			led_matrix_status = COL3;
 8000c74:	4b30      	ldr	r3, [pc, #192]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000c76:	2204      	movs	r2, #4
 8000c78:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c7a:	e050      	b.n	8000d1e <LedMatrixDisplay+0x14a>
	case COL3:
		updateLEDMatrix(3);	/* Turn on col 3*/
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f7ff faaf 	bl	80001e0 <updateLEDMatrix>
		if(timer2_flag == 0)
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <LedMatrixDisplay+0x168>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14b      	bne.n	8000d22 <LedMatrixDisplay+0x14e>
		{
			setTimer2(DISPLAY_TIME_OF_A_COL);
 8000c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c8e:	f000 f979 	bl	8000f84 <setTimer2>
			led_matrix_status = COL4;
 8000c92:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000c94:	2205      	movs	r2, #5
 8000c96:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000c98:	e043      	b.n	8000d22 <LedMatrixDisplay+0x14e>
	case COL4:
		updateLEDMatrix(4);	/* Turn on col 4*/
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	f7ff faa0 	bl	80001e0 <updateLEDMatrix>
		if(timer2_flag == 0)
 8000ca0:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <LedMatrixDisplay+0x168>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d13e      	bne.n	8000d26 <LedMatrixDisplay+0x152>
		{
			setTimer2(DISPLAY_TIME_OF_A_COL);
 8000ca8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cac:	f000 f96a 	bl	8000f84 <setTimer2>
			led_matrix_status = COL5;
 8000cb0:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000cb2:	2206      	movs	r2, #6
 8000cb4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cb6:	e036      	b.n	8000d26 <LedMatrixDisplay+0x152>
	case COL5:
		updateLEDMatrix(5);	/* Turn on col 5*/
 8000cb8:	2005      	movs	r0, #5
 8000cba:	f7ff fa91 	bl	80001e0 <updateLEDMatrix>
		if(timer2_flag == 0)
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <LedMatrixDisplay+0x168>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d131      	bne.n	8000d2a <LedMatrixDisplay+0x156>
		{
			setTimer2(DISPLAY_TIME_OF_A_COL);
 8000cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cca:	f000 f95b 	bl	8000f84 <setTimer2>
			led_matrix_status = COL6;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cd4:	e029      	b.n	8000d2a <LedMatrixDisplay+0x156>
	case COL6:
		updateLEDMatrix(6);	/* Turn on col 6*/
 8000cd6:	2006      	movs	r0, #6
 8000cd8:	f7ff fa82 	bl	80001e0 <updateLEDMatrix>
		if(timer2_flag == 0)
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <LedMatrixDisplay+0x168>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d124      	bne.n	8000d2e <LedMatrixDisplay+0x15a>
		{
			setTimer2(DISPLAY_TIME_OF_A_COL);
 8000ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce8:	f000 f94c 	bl	8000f84 <setTimer2>
			led_matrix_status = COL7;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000cee:	2208      	movs	r2, #8
 8000cf0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000cf2:	e01c      	b.n	8000d2e <LedMatrixDisplay+0x15a>
	case COL7:
		updateLEDMatrix(7);	/* Turn on col 7*/
 8000cf4:	2007      	movs	r0, #7
 8000cf6:	f7ff fa73 	bl	80001e0 <updateLEDMatrix>
		if(timer2_flag == 0)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <LedMatrixDisplay+0x168>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d117      	bne.n	8000d32 <LedMatrixDisplay+0x15e>
		{
			setTimer2(DISPLAY_TIME_OF_A_COL);
 8000d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d06:	f000 f93d 	bl	8000f84 <setTimer2>
			led_matrix_status = COL0;
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <LedMatrixDisplay+0x164>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d10:	e00f      	b.n	8000d32 <LedMatrixDisplay+0x15e>
	default:
		break;
 8000d12:	bf00      	nop
 8000d14:	e00e      	b.n	8000d34 <LedMatrixDisplay+0x160>
		break;
 8000d16:	bf00      	nop
 8000d18:	e00c      	b.n	8000d34 <LedMatrixDisplay+0x160>
		break;
 8000d1a:	bf00      	nop
 8000d1c:	e00a      	b.n	8000d34 <LedMatrixDisplay+0x160>
		break;
 8000d1e:	bf00      	nop
 8000d20:	e008      	b.n	8000d34 <LedMatrixDisplay+0x160>
		break;
 8000d22:	bf00      	nop
 8000d24:	e006      	b.n	8000d34 <LedMatrixDisplay+0x160>
		break;
 8000d26:	bf00      	nop
 8000d28:	e004      	b.n	8000d34 <LedMatrixDisplay+0x160>
		break;
 8000d2a:	bf00      	nop
 8000d2c:	e002      	b.n	8000d34 <LedMatrixDisplay+0x160>
		break;
 8000d2e:	bf00      	nop
 8000d30:	e000      	b.n	8000d34 <LedMatrixDisplay+0x160>
		break;
 8000d32:	bf00      	nop
	}
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000031 	.word	0x20000031
 8000d3c:	20000088 	.word	0x20000088

08000d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d44:	f000 fa50 	bl	80011e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d48:	f000 f812 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d4c:	f000 f898 	bl	8000e80 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d50:	f000 f84a 	bl	8000de8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(& htim2); /*function to initialize the timer*/
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <main+0x2c>)
 8000d56:	f001 f979 	bl	800204c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer4(1000);
 8000d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5e:	f000 f92d 	bl	8000fbc <setTimer4>
  while (1)
  {
	  /*********************************************************************************
	   EXERCISE 05
	  *********************************************************************************/
	  blink_led();
 8000d62:	f7ff f9f3 	bl	800014c <blink_led>
//		  if(index_led_matrix >= MAX_LED_MATRIX)
//		  {
//			  index_led_matrix = 0;
//		  }
//	  }
	  LedMatrixDisplay();
 8000d66:	f7ff ff35 	bl	8000bd4 <LedMatrixDisplay>
	  blink_led();
 8000d6a:	e7fa      	b.n	8000d62 <main+0x22>
 8000d6c:	20000034 	.word	0x20000034

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b090      	sub	sp, #64	; 0x40
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	2228      	movs	r2, #40	; 0x28
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 fd20 	bl	80027c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d96:	2301      	movs	r3, #1
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	f107 0318 	add.w	r3, r7, #24
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fd22 	bl	80017f0 <HAL_RCC_OscConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000db2:	f000 f8c5 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 ff90 	bl	8001cf4 <HAL_RCC_ClockConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dda:	f000 f8b1 	bl	8000f40 <Error_Handler>
  }
}
 8000dde:	bf00      	nop
 8000de0:	3740      	adds	r7, #64	; 0x40
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_TIM2_Init+0x94>)
 8000e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_TIM2_Init+0x94>)
 8000e0e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_TIM2_Init+0x94>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_TIM2_Init+0x94>)
 8000e1c:	2209      	movs	r2, #9
 8000e1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_TIM2_Init+0x94>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_TIM2_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e2c:	4813      	ldr	r0, [pc, #76]	; (8000e7c <MX_TIM2_Init+0x94>)
 8000e2e:	f001 f8bd 	bl	8001fac <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e38:	f000 f882 	bl	8000f40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <MX_TIM2_Init+0x94>)
 8000e4a:	f001 fa53 	bl	80022f4 <HAL_TIM_ConfigClockSource>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e54:	f000 f874 	bl	8000f40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e60:	463b      	mov	r3, r7
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_TIM2_Init+0x94>)
 8000e66:	f001 fc1f 	bl	80026a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e70:	f000 f866 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000034 	.word	0x20000034

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <MX_GPIO_Init+0xa0>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a21      	ldr	r2, [pc, #132]	; (8000f20 <MX_GPIO_Init+0xa0>)
 8000e9a:	f043 0304 	orr.w	r3, r3, #4
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <MX_GPIO_Init+0xa0>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_GPIO_Init+0xa0>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <MX_GPIO_Init+0xa0>)
 8000eb2:	f043 0308 	orr.w	r3, r3, #8
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <MX_GPIO_Init+0xa0>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0308 	and.w	r3, r3, #8
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000eca:	4816      	ldr	r0, [pc, #88]	; (8000f24 <MX_GPIO_Init+0xa4>)
 8000ecc:	f000 fc78 	bl	80017c0 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000ed6:	4814      	ldr	r0, [pc, #80]	; (8000f28 <MX_GPIO_Init+0xa8>)
 8000ed8:	f000 fc72 	bl	80017c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000edc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000ee0:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2302      	movs	r3, #2
 8000eec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480b      	ldr	r0, [pc, #44]	; (8000f24 <MX_GPIO_Init+0xa4>)
 8000ef6:	f000 fae7 	bl	80014c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|ROW2_Pin
 8000efa:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000efe:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	4619      	mov	r1, r3
 8000f12:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_GPIO_Init+0xa8>)
 8000f14:	f000 fad8 	bl	80014c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f18:	bf00      	nop
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40010c00 	.word	0x40010c00

08000f2c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/*******************************************************
 Interrupt function is called every 10 ms
*******************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f34:	f000 f85e 	bl	8000ff4 <timerRun>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <Error_Handler+0x8>
	...

08000f4c <setTimer1>:
 */
#include "software_timer.h"
int timer1_counter = 0;
int timer1_flag = 0;

void setTimer1(int duration){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a08      	ldr	r2, [pc, #32]	; (8000f78 <setTimer1+0x2c>)
 8000f58:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5c:	1092      	asrs	r2, r2, #2
 8000f5e:	17db      	asrs	r3, r3, #31
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <setTimer1+0x30>)
 8000f64:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <setTimer1+0x34>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	66666667 	.word	0x66666667
 8000f7c:	2000007c 	.word	0x2000007c
 8000f80:	20000080 	.word	0x20000080

08000f84 <setTimer2>:

int timer2_counter = 0;
int timer2_flag = 0;
void setTimer2(int duration)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <setTimer2+0x2c>)
 8000f90:	fb82 1203 	smull	r1, r2, r2, r3
 8000f94:	1092      	asrs	r2, r2, #2
 8000f96:	17db      	asrs	r3, r3, #31
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <setTimer2+0x30>)
 8000f9c:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <setTimer2+0x34>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	66666667 	.word	0x66666667
 8000fb4:	20000084 	.word	0x20000084
 8000fb8:	20000088 	.word	0x20000088

08000fbc <setTimer4>:
 SOFTWARE TIMER 4
*********************************************************/
int timer4_counter = 0;
int timer4_flag = 0;
void setTimer4(int duration)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <setTimer4+0x2c>)
 8000fc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000fcc:	1092      	asrs	r2, r2, #2
 8000fce:	17db      	asrs	r3, r3, #31
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	4a06      	ldr	r2, [pc, #24]	; (8000fec <setTimer4+0x30>)
 8000fd4:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <setTimer4+0x34>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	66666667 	.word	0x66666667
 8000fec:	20000094 	.word	0x20000094
 8000ff0:	20000098 	.word	0x20000098

08000ff4 <timerRun>:

/*********************************************************
 CONTROL TIMER
*********************************************************/
void timerRun(){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <timerRun+0x8c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dd0b      	ble.n	8001018 <timerRun+0x24>
		timer1_counter--;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <timerRun+0x8c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	3b01      	subs	r3, #1
 8001006:	4a1e      	ldr	r2, [pc, #120]	; (8001080 <timerRun+0x8c>)
 8001008:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <timerRun+0x8c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	dc02      	bgt.n	8001018 <timerRun+0x24>
			timer1_flag = 1;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <timerRun+0x90>)
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0)
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <timerRun+0x94>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	dd0b      	ble.n	8001038 <timerRun+0x44>
	{
		timer2_counter--;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <timerRun+0x94>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3b01      	subs	r3, #1
 8001026:	4a18      	ldr	r2, [pc, #96]	; (8001088 <timerRun+0x94>)
 8001028:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0)
 800102a:	4b17      	ldr	r3, [pc, #92]	; (8001088 <timerRun+0x94>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	dc02      	bgt.n	8001038 <timerRun+0x44>
		{
			timer2_flag = 1;
 8001032:	4b16      	ldr	r3, [pc, #88]	; (800108c <timerRun+0x98>)
 8001034:	2201      	movs	r2, #1
 8001036:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter > 0)
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <timerRun+0x9c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	dd0b      	ble.n	8001058 <timerRun+0x64>
	{
		timer3_counter--;
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <timerRun+0x9c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3b01      	subs	r3, #1
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <timerRun+0x9c>)
 8001048:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0)
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <timerRun+0x9c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	dc02      	bgt.n	8001058 <timerRun+0x64>
		{
			timer3_flag = 1;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <timerRun+0xa0>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0)
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <timerRun+0xa4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	dd0b      	ble.n	8001078 <timerRun+0x84>
	{
		timer4_counter--;
 8001060:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <timerRun+0xa4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3b01      	subs	r3, #1
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <timerRun+0xa4>)
 8001068:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0)
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <timerRun+0xa4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	dc02      	bgt.n	8001078 <timerRun+0x84>
		{
			timer4_flag = 1;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <timerRun+0xa8>)
 8001074:	2201      	movs	r2, #1
 8001076:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	2000007c 	.word	0x2000007c
 8001084:	20000080 	.word	0x20000080
 8001088:	20000084 	.word	0x20000084
 800108c:	20000088 	.word	0x20000088
 8001090:	2000008c 	.word	0x2000008c
 8001094:	20000090 	.word	0x20000090
 8001098:	20000094 	.word	0x20000094
 800109c:	20000098 	.word	0x20000098

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_MspInit+0x40>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_MspInit+0x40>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_MspInit+0x40>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_MspInit+0x40>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <HAL_MspInit+0x40>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <HAL_MspInit+0x40>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	bc80      	pop	{r7}
 80010de:	4770      	bx	lr
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d113      	bne.n	800111e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_TIM_Base_MspInit+0x44>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_TIM_Base_MspInit+0x44>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	61d3      	str	r3, [r2, #28]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <HAL_TIM_Base_MspInit+0x44>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	201c      	movs	r0, #28
 8001114:	f000 f9a1 	bl	800145a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001118:	201c      	movs	r0, #28
 800111a:	f000 f9ba 	bl	8001492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f000 f87f 	bl	8001274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <TIM2_IRQHandler+0x10>)
 8001182:	f000 ffaf 	bl	80020e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000034 	.word	0x20000034

08001190 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr

0800119c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800119c:	f7ff fff8 	bl	8001190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a0:	480b      	ldr	r0, [pc, #44]	; (80011d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011a2:	490c      	ldr	r1, [pc, #48]	; (80011d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011a4:	4a0c      	ldr	r2, [pc, #48]	; (80011d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011a8:	e002      	b.n	80011b0 <LoopCopyDataInit>

080011aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ae:	3304      	adds	r3, #4

080011b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b4:	d3f9      	bcc.n	80011aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011b6:	4a09      	ldr	r2, [pc, #36]	; (80011dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011b8:	4c09      	ldr	r4, [pc, #36]	; (80011e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011bc:	e001      	b.n	80011c2 <LoopFillZerobss>

080011be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c0:	3204      	adds	r2, #4

080011c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c4:	d3fb      	bcc.n	80011be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011c6:	f001 fad9 	bl	800277c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ca:	f7ff fdb9 	bl	8000d40 <main>
  bx lr
 80011ce:	4770      	bx	lr
  ldr r0, =_sdata
 80011d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80011d8:	08002818 	.word	0x08002818
  ldr r2, =_sbss
 80011dc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80011e0:	200000a0 	.word	0x200000a0

080011e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e4:	e7fe      	b.n	80011e4 <ADC1_2_IRQHandler>
	...

080011e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <HAL_Init+0x28>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a07      	ldr	r2, [pc, #28]	; (8001210 <HAL_Init+0x28>)
 80011f2:	f043 0310 	orr.w	r3, r3, #16
 80011f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f8:	2003      	movs	r0, #3
 80011fa:	f000 f923 	bl	8001444 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011fe:	200f      	movs	r0, #15
 8001200:	f000 f808 	bl	8001214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001204:	f7ff ff4c 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40022000 	.word	0x40022000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_InitTick+0x54>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_InitTick+0x58>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	fbb3 f3f1 	udiv	r3, r3, r1
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f93b 	bl	80014ae <HAL_SYSTICK_Config>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00e      	b.n	8001260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2b0f      	cmp	r3, #15
 8001246:	d80a      	bhi.n	800125e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001248:	2200      	movs	r2, #0
 800124a:	6879      	ldr	r1, [r7, #4]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	f000 f903 	bl	800145a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001254:	4a06      	ldr	r2, [pc, #24]	; (8001270 <HAL_InitTick+0x5c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e000      	b.n	8001260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000008 	.word	0x20000008
 800126c:	20000010 	.word	0x20000010
 8001270:	2000000c 	.word	0x2000000c

08001274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b05      	ldr	r3, [pc, #20]	; (8001290 <HAL_IncTick+0x1c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b05      	ldr	r3, [pc, #20]	; (8001294 <HAL_IncTick+0x20>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a03      	ldr	r2, [pc, #12]	; (8001294 <HAL_IncTick+0x20>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000010 	.word	0x20000010
 8001294:	2000009c 	.word	0x2000009c

08001298 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <HAL_GetTick+0x10>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	2000009c 	.word	0x2000009c

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4906      	ldr	r1, [pc, #24]	; (8001344 <__NVIC_EnableIRQ+0x34>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db0a      	blt.n	8001372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	b2da      	uxtb	r2, r3
 8001360:	490c      	ldr	r1, [pc, #48]	; (8001394 <__NVIC_SetPriority+0x4c>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	0112      	lsls	r2, r2, #4
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	440b      	add	r3, r1
 800136c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001370:	e00a      	b.n	8001388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <__NVIC_SetPriority+0x50>)
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	f003 030f 	and.w	r3, r3, #15
 800137e:	3b04      	subs	r3, #4
 8001380:	0112      	lsls	r2, r2, #4
 8001382:	b2d2      	uxtb	r2, r2
 8001384:	440b      	add	r3, r1
 8001386:	761a      	strb	r2, [r3, #24]
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f1c3 0307 	rsb	r3, r3, #7
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	bf28      	it	cs
 80013ba:	2304      	movcs	r3, #4
 80013bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3304      	adds	r3, #4
 80013c2:	2b06      	cmp	r3, #6
 80013c4:	d902      	bls.n	80013cc <NVIC_EncodePriority+0x30>
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3b03      	subs	r3, #3
 80013ca:	e000      	b.n	80013ce <NVIC_EncodePriority+0x32>
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43da      	mvns	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e4:	f04f 31ff 	mov.w	r1, #4294967295
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f4:	4313      	orrs	r3, r2
         );
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3724      	adds	r7, #36	; 0x24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001410:	d301      	bcc.n	8001416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001412:	2301      	movs	r3, #1
 8001414:	e00f      	b.n	8001436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001416:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <SysTick_Config+0x40>)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141e:	210f      	movs	r1, #15
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f7ff ff90 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <SysTick_Config+0x40>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <SysTick_Config+0x40>)
 8001430:	2207      	movs	r2, #7
 8001432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	e000e010 	.word	0xe000e010

08001444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff ff2d 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145a:	b580      	push	{r7, lr}
 800145c:	b086      	sub	sp, #24
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800146c:	f7ff ff42 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001470:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	68b9      	ldr	r1, [r7, #8]
 8001476:	6978      	ldr	r0, [r7, #20]
 8001478:	f7ff ff90 	bl	800139c <NVIC_EncodePriority>
 800147c:	4602      	mov	r2, r0
 800147e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001482:	4611      	mov	r1, r2
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff5f 	bl	8001348 <__NVIC_SetPriority>
}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff35 	bl	8001310 <__NVIC_EnableIRQ>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ffa2 	bl	8001400 <SysTick_Config>
 80014bc:	4603      	mov	r3, r0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014da:	e161      	b.n	80017a0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014dc:	2201      	movs	r2, #1
 80014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	69fa      	ldr	r2, [r7, #28]
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f040 8150 	bne.w	800179a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4a97      	ldr	r2, [pc, #604]	; (800175c <HAL_GPIO_Init+0x294>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d05e      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 8001504:	4a95      	ldr	r2, [pc, #596]	; (800175c <HAL_GPIO_Init+0x294>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d875      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 800150a:	4a95      	ldr	r2, [pc, #596]	; (8001760 <HAL_GPIO_Init+0x298>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d058      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 8001510:	4a93      	ldr	r2, [pc, #588]	; (8001760 <HAL_GPIO_Init+0x298>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d86f      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 8001516:	4a93      	ldr	r2, [pc, #588]	; (8001764 <HAL_GPIO_Init+0x29c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d052      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 800151c:	4a91      	ldr	r2, [pc, #580]	; (8001764 <HAL_GPIO_Init+0x29c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d869      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 8001522:	4a91      	ldr	r2, [pc, #580]	; (8001768 <HAL_GPIO_Init+0x2a0>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d04c      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 8001528:	4a8f      	ldr	r2, [pc, #572]	; (8001768 <HAL_GPIO_Init+0x2a0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d863      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 800152e:	4a8f      	ldr	r2, [pc, #572]	; (800176c <HAL_GPIO_Init+0x2a4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d046      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
 8001534:	4a8d      	ldr	r2, [pc, #564]	; (800176c <HAL_GPIO_Init+0x2a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d85d      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 800153a:	2b12      	cmp	r3, #18
 800153c:	d82a      	bhi.n	8001594 <HAL_GPIO_Init+0xcc>
 800153e:	2b12      	cmp	r3, #18
 8001540:	d859      	bhi.n	80015f6 <HAL_GPIO_Init+0x12e>
 8001542:	a201      	add	r2, pc, #4	; (adr r2, 8001548 <HAL_GPIO_Init+0x80>)
 8001544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001548:	080015c3 	.word	0x080015c3
 800154c:	0800159d 	.word	0x0800159d
 8001550:	080015af 	.word	0x080015af
 8001554:	080015f1 	.word	0x080015f1
 8001558:	080015f7 	.word	0x080015f7
 800155c:	080015f7 	.word	0x080015f7
 8001560:	080015f7 	.word	0x080015f7
 8001564:	080015f7 	.word	0x080015f7
 8001568:	080015f7 	.word	0x080015f7
 800156c:	080015f7 	.word	0x080015f7
 8001570:	080015f7 	.word	0x080015f7
 8001574:	080015f7 	.word	0x080015f7
 8001578:	080015f7 	.word	0x080015f7
 800157c:	080015f7 	.word	0x080015f7
 8001580:	080015f7 	.word	0x080015f7
 8001584:	080015f7 	.word	0x080015f7
 8001588:	080015f7 	.word	0x080015f7
 800158c:	080015a5 	.word	0x080015a5
 8001590:	080015b9 	.word	0x080015b9
 8001594:	4a76      	ldr	r2, [pc, #472]	; (8001770 <HAL_GPIO_Init+0x2a8>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800159a:	e02c      	b.n	80015f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	623b      	str	r3, [r7, #32]
          break;
 80015a2:	e029      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	3304      	adds	r3, #4
 80015aa:	623b      	str	r3, [r7, #32]
          break;
 80015ac:	e024      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	3308      	adds	r3, #8
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e01f      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	330c      	adds	r3, #12
 80015be:	623b      	str	r3, [r7, #32]
          break;
 80015c0:	e01a      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015ca:	2304      	movs	r3, #4
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e013      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d105      	bne.n	80015e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	611a      	str	r2, [r3, #16]
          break;
 80015e2:	e009      	b.n	80015f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e4:	2308      	movs	r3, #8
 80015e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	615a      	str	r2, [r3, #20]
          break;
 80015ee:	e003      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f0:	2300      	movs	r3, #0
 80015f2:	623b      	str	r3, [r7, #32]
          break;
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x130>
          break;
 80015f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	2bff      	cmp	r3, #255	; 0xff
 80015fc:	d801      	bhi.n	8001602 <HAL_GPIO_Init+0x13a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_Init+0x13e>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3304      	adds	r3, #4
 8001606:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2bff      	cmp	r3, #255	; 0xff
 800160c:	d802      	bhi.n	8001614 <HAL_GPIO_Init+0x14c>
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	e002      	b.n	800161a <HAL_GPIO_Init+0x152>
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	3b08      	subs	r3, #8
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	210f      	movs	r1, #15
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	401a      	ands	r2, r3
 800162c:	6a39      	ldr	r1, [r7, #32]
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	fa01 f303 	lsl.w	r3, r1, r3
 8001634:	431a      	orrs	r2, r3
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80a9 	beq.w	800179a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001648:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_GPIO_Init+0x2ac>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a49      	ldr	r2, [pc, #292]	; (8001774 <HAL_GPIO_Init+0x2ac>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b47      	ldr	r3, [pc, #284]	; (8001774 <HAL_GPIO_Init+0x2ac>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001660:	4a45      	ldr	r2, [pc, #276]	; (8001778 <HAL_GPIO_Init+0x2b0>)
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800166c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	68fa      	ldr	r2, [r7, #12]
 8001680:	4013      	ands	r3, r2
 8001682:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3d      	ldr	r2, [pc, #244]	; (800177c <HAL_GPIO_Init+0x2b4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d00d      	beq.n	80016a8 <HAL_GPIO_Init+0x1e0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3c      	ldr	r2, [pc, #240]	; (8001780 <HAL_GPIO_Init+0x2b8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d007      	beq.n	80016a4 <HAL_GPIO_Init+0x1dc>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a3b      	ldr	r2, [pc, #236]	; (8001784 <HAL_GPIO_Init+0x2bc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d101      	bne.n	80016a0 <HAL_GPIO_Init+0x1d8>
 800169c:	2302      	movs	r3, #2
 800169e:	e004      	b.n	80016aa <HAL_GPIO_Init+0x1e2>
 80016a0:	2303      	movs	r3, #3
 80016a2:	e002      	b.n	80016aa <HAL_GPIO_Init+0x1e2>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_GPIO_Init+0x1e2>
 80016a8:	2300      	movs	r3, #0
 80016aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ac:	f002 0203 	and.w	r2, r2, #3
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	4093      	lsls	r3, r2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ba:	492f      	ldr	r1, [pc, #188]	; (8001778 <HAL_GPIO_Init+0x2b0>)
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d4:	4b2c      	ldr	r3, [pc, #176]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	492b      	ldr	r1, [pc, #172]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	4313      	orrs	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
 80016e0:	e006      	b.n	80016f0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016e2:	4b29      	ldr	r3, [pc, #164]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	4927      	ldr	r1, [pc, #156]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016fc:	4b22      	ldr	r3, [pc, #136]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	4921      	ldr	r1, [pc, #132]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	60cb      	str	r3, [r1, #12]
 8001708:	e006      	b.n	8001718 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	43db      	mvns	r3, r3
 8001712:	491d      	ldr	r1, [pc, #116]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 8001714:	4013      	ands	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	4917      	ldr	r1, [pc, #92]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	43db      	mvns	r3, r3
 800173a:	4913      	ldr	r1, [pc, #76]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 800173c:	4013      	ands	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01f      	beq.n	800178c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800174c:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	490d      	ldr	r1, [pc, #52]	; (8001788 <HAL_GPIO_Init+0x2c0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e01f      	b.n	800179a <HAL_GPIO_Init+0x2d2>
 800175a:	bf00      	nop
 800175c:	10320000 	.word	0x10320000
 8001760:	10310000 	.word	0x10310000
 8001764:	10220000 	.word	0x10220000
 8001768:	10210000 	.word	0x10210000
 800176c:	10120000 	.word	0x10120000
 8001770:	10110000 	.word	0x10110000
 8001774:	40021000 	.word	0x40021000
 8001778:	40010000 	.word	0x40010000
 800177c:	40010800 	.word	0x40010800
 8001780:	40010c00 	.word	0x40010c00
 8001784:	40011000 	.word	0x40011000
 8001788:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_GPIO_Init+0x2f4>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	4909      	ldr	r1, [pc, #36]	; (80017bc <HAL_GPIO_Init+0x2f4>)
 8001796:	4013      	ands	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	3301      	adds	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f47f ae96 	bne.w	80014dc <HAL_GPIO_Init+0x14>
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	372c      	adds	r7, #44	; 0x2c
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	40010400 	.word	0x40010400

080017c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]
 80017cc:	4613      	mov	r3, r2
 80017ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d0:	787b      	ldrb	r3, [r7, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d6:	887a      	ldrh	r2, [r7, #2]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017dc:	e003      	b.n	80017e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	041a      	lsls	r2, r3, #16
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	611a      	str	r2, [r3, #16]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e272      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8087 	beq.w	800191e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d00c      	beq.n	8001836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800181c:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d112      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
 8001828:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d10b      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d06c      	beq.n	800191c <HAL_RCC_OscConfig+0x12c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d168      	bne.n	800191c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e24c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x76>
 8001858:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e02e      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x98>
 800186e:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a77      	ldr	r2, [pc, #476]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0xbc>
 8001892:	4b72      	ldr	r3, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a71      	ldr	r2, [pc, #452]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a67      	ldr	r2, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fce4 	bl	8001298 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fce0 	bl	8001298 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e200      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xe4>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fcd0 	bl	8001298 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fccc 	bl	8001298 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1ec      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x10c>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192a:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
 8001942:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1c0      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4939      	ldr	r1, [pc, #228]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fc85 	bl	8001298 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fc81 	bl	8001298 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1a1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4927      	ldr	r1, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc64 	bl	8001298 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fc60 	bl	8001298 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e180      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03a      	beq.n	8001a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d019      	beq.n	8001a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fc44 	bl	8001298 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc40 	bl	8001298 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e160      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 fa9c 	bl	8001f70 <RCC_Delay>
 8001a38:	e01c      	b.n	8001a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fc2a 	bl	8001298 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a46:	e00f      	b.n	8001a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff fc26 	bl	8001298 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d908      	bls.n	8001a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e146      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	42420000 	.word	0x42420000
 8001a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e9      	bne.n	8001a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a6 	beq.w	8001bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a87      	ldr	r2, [pc, #540]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7e      	ldr	r2, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fbe7 	bl	8001298 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff fbe3 	bl	8001298 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e103      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x312>
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	e02d      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x334>
 8001b0a:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6213      	str	r3, [r2, #32]
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a66      	ldr	r2, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	e01c      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x356>
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a60      	ldr	r2, [pc, #384]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e00b      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb97 	bl	8001298 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fb93 	bl	8001298 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0b1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCC_OscConfig+0x37e>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fb81 	bl	8001298 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fb7d 	bl	8001298 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e09b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8087 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d061      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d146      	bne.n	8001c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fb51 	bl	8001298 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff fb4d 	bl	8001298 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e06d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d108      	bne.n	8001c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	4921      	ldr	r1, [pc, #132]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a19      	ldr	r1, [r3, #32]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	430b      	orrs	r3, r1
 8001c46:	491b      	ldr	r1, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fb21 	bl	8001298 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff fb1d 	bl	8001298 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e03d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x46a>
 8001c78:	e035      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fb0a 	bl	8001298 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff fb06 	bl	8001298 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e026      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x498>
 8001ca6:	e01e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e019      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x500>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d0      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d910      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4965      	ldr	r1, [pc, #404]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0b8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d50:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	494d      	ldr	r1, [pc, #308]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d040      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d115      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e07f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e073      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e06b      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4936      	ldr	r1, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7ff fa58 	bl	8001298 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7ff fa54 	bl	8001298 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e053      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d210      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4922      	ldr	r1, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e032      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4916      	ldr	r1, [pc, #88]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e82:	f000 f821 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f9b6 	bl	8001214 <HAL_InitTick>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	080027ec 	.word	0x080027ec
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	2000000c 	.word	0x2000000c

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d002      	beq.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ef2:	2b08      	cmp	r3, #8
 8001ef4:	d003      	beq.n	8001efe <HAL_RCC_GetSysClockFreq+0x36>
 8001ef6:	e027      	b.n	8001f48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efa:	613b      	str	r3, [r7, #16]
      break;
 8001efc:	e027      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	0c9b      	lsrs	r3, r3, #18
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f08:	5cd3      	ldrb	r3, [r2, r3]
 8001f0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d010      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_GetSysClockFreq+0x94>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	0c5b      	lsrs	r3, r3, #17
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a0d      	ldr	r2, [pc, #52]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2a:	fb03 f202 	mul.w	r2, r3, r2
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	e004      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a0c      	ldr	r2, [pc, #48]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f3c:	fb02 f303 	mul.w	r3, r2, r3
 8001f40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	613b      	str	r3, [r7, #16]
      break;
 8001f46:	e002      	b.n	8001f4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4a:	613b      	str	r3, [r7, #16]
      break;
 8001f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f4e:	693b      	ldr	r3, [r7, #16]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	007a1200 	.word	0x007a1200
 8001f64:	080027fc 	.word	0x080027fc
 8001f68:	0800280c 	.word	0x0800280c
 8001f6c:	003d0900 	.word	0x003d0900

08001f70 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <RCC_Delay+0x34>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <RCC_Delay+0x38>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0a5b      	lsrs	r3, r3, #9
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f8c:	bf00      	nop
  }
  while (Delay --);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	60fa      	str	r2, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1f9      	bne.n	8001f8c <RCC_Delay+0x1c>
}
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3714      	adds	r7, #20
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	20000008 	.word	0x20000008
 8001fa8:	10624dd3 	.word	0x10624dd3

08001fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e041      	b.n	8002042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff f886 	bl	80010e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3304      	adds	r3, #4
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4610      	mov	r0, r2
 8001fec:	f000 fa6e 	bl	80024cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d001      	beq.n	8002064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e035      	b.n	80020d0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2202      	movs	r2, #2
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a16      	ldr	r2, [pc, #88]	; (80020dc <HAL_TIM_Base_Start_IT+0x90>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d009      	beq.n	800209a <HAL_TIM_Base_Start_IT+0x4e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208e:	d004      	beq.n	800209a <HAL_TIM_Base_Start_IT+0x4e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_TIM_Base_Start_IT+0x94>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d111      	bne.n	80020be <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d010      	beq.n	80020ce <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f042 0201 	orr.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020bc:	e007      	b.n	80020ce <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40012c00 	.word	0x40012c00
 80020e0:	40000400 	.word	0x40000400

080020e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d122      	bne.n	8002140 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d11b      	bne.n	8002140 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0202 	mvn.w	r2, #2
 8002110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f9b4 	bl	8002494 <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f9a7 	bl	8002482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f9b6 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b04      	cmp	r3, #4
 800214c:	d122      	bne.n	8002194 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b04      	cmp	r3, #4
 800215a:	d11b      	bne.n	8002194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0204 	mvn.w	r2, #4
 8002164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2202      	movs	r2, #2
 800216a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f98a 	bl	8002494 <HAL_TIM_IC_CaptureCallback>
 8002180:	e005      	b.n	800218e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 f97d 	bl	8002482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f98c 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	f003 0308 	and.w	r3, r3, #8
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d122      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d11b      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f06f 0208 	mvn.w	r2, #8
 80021b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2204      	movs	r2, #4
 80021be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f960 	bl	8002494 <HAL_TIM_IC_CaptureCallback>
 80021d4:	e005      	b.n	80021e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f953 	bl	8002482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f962 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0310 	and.w	r3, r3, #16
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d122      	bne.n	800223c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b10      	cmp	r3, #16
 8002202:	d11b      	bne.n	800223c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0210 	mvn.w	r2, #16
 800220c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2208      	movs	r2, #8
 8002212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f936 	bl	8002494 <HAL_TIM_IC_CaptureCallback>
 8002228:	e005      	b.n	8002236 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f929 	bl	8002482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f938 	bl	80024a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b01      	cmp	r3, #1
 8002248:	d10e      	bne.n	8002268 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d107      	bne.n	8002268 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f06f 0201 	mvn.w	r2, #1
 8002260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f7fe fe62 	bl	8000f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002272:	2b80      	cmp	r3, #128	; 0x80
 8002274:	d10e      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d107      	bne.n	8002294 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800228c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 fa6b 	bl	800276a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800229e:	2b40      	cmp	r3, #64	; 0x40
 80022a0:	d10e      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b40      	cmp	r3, #64	; 0x40
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f8fc 	bl	80024b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f003 0320 	and.w	r3, r3, #32
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d10e      	bne.n	80022ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d107      	bne.n	80022ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f06f 0220 	mvn.w	r2, #32
 80022e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fa36 	bl	8002758 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_TIM_ConfigClockSource+0x1c>
 800230c:	2302      	movs	r3, #2
 800230e:	e0b4      	b.n	800247a <HAL_TIM_ConfigClockSource+0x186>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800232e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002348:	d03e      	beq.n	80023c8 <HAL_TIM_ConfigClockSource+0xd4>
 800234a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800234e:	f200 8087 	bhi.w	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002356:	f000 8086 	beq.w	8002466 <HAL_TIM_ConfigClockSource+0x172>
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235e:	d87f      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b70      	cmp	r3, #112	; 0x70
 8002362:	d01a      	beq.n	800239a <HAL_TIM_ConfigClockSource+0xa6>
 8002364:	2b70      	cmp	r3, #112	; 0x70
 8002366:	d87b      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002368:	2b60      	cmp	r3, #96	; 0x60
 800236a:	d050      	beq.n	800240e <HAL_TIM_ConfigClockSource+0x11a>
 800236c:	2b60      	cmp	r3, #96	; 0x60
 800236e:	d877      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002370:	2b50      	cmp	r3, #80	; 0x50
 8002372:	d03c      	beq.n	80023ee <HAL_TIM_ConfigClockSource+0xfa>
 8002374:	2b50      	cmp	r3, #80	; 0x50
 8002376:	d873      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002378:	2b40      	cmp	r3, #64	; 0x40
 800237a:	d058      	beq.n	800242e <HAL_TIM_ConfigClockSource+0x13a>
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d86f      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002380:	2b30      	cmp	r3, #48	; 0x30
 8002382:	d064      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x15a>
 8002384:	2b30      	cmp	r3, #48	; 0x30
 8002386:	d86b      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002388:	2b20      	cmp	r3, #32
 800238a:	d060      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x15a>
 800238c:	2b20      	cmp	r3, #32
 800238e:	d867      	bhi.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d05c      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x15a>
 8002394:	2b10      	cmp	r3, #16
 8002396:	d05a      	beq.n	800244e <HAL_TIM_ConfigClockSource+0x15a>
 8002398:	e062      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f000 f95e 	bl	800266a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	609a      	str	r2, [r3, #8]
      break;
 80023c6:	e04f      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	6899      	ldr	r1, [r3, #8]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f000 f947 	bl	800266a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ea:	609a      	str	r2, [r3, #8]
      break;
 80023ec:	e03c      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	461a      	mov	r2, r3
 80023fc:	f000 f8be 	bl	800257c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2150      	movs	r1, #80	; 0x50
 8002406:	4618      	mov	r0, r3
 8002408:	f000 f915 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 800240c:	e02c      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6859      	ldr	r1, [r3, #4]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	461a      	mov	r2, r3
 800241c:	f000 f8dc 	bl	80025d8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2160      	movs	r1, #96	; 0x60
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f905 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 800242c:	e01c      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	461a      	mov	r2, r3
 800243c:	f000 f89e 	bl	800257c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2140      	movs	r1, #64	; 0x40
 8002446:	4618      	mov	r0, r3
 8002448:	f000 f8f5 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 800244c:	e00c      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	4610      	mov	r0, r2
 800245a:	f000 f8ec 	bl	8002636 <TIM_ITRx_SetConfig>
      break;
 800245e:	e003      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	73fb      	strb	r3, [r7, #15]
      break;
 8002464:	e000      	b.n	8002468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr
	...

080024cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a25      	ldr	r2, [pc, #148]	; (8002574 <TIM_Base_SetConfig+0xa8>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <TIM_Base_SetConfig+0x28>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ea:	d003      	beq.n	80024f4 <TIM_Base_SetConfig+0x28>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a22      	ldr	r2, [pc, #136]	; (8002578 <TIM_Base_SetConfig+0xac>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d108      	bne.n	8002506 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a1a      	ldr	r2, [pc, #104]	; (8002574 <TIM_Base_SetConfig+0xa8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d007      	beq.n	800251e <TIM_Base_SetConfig+0x52>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002514:	d003      	beq.n	800251e <TIM_Base_SetConfig+0x52>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a17      	ldr	r2, [pc, #92]	; (8002578 <TIM_Base_SetConfig+0xac>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d108      	bne.n	8002530 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a07      	ldr	r2, [pc, #28]	; (8002574 <TIM_Base_SetConfig+0xa8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d103      	bne.n	8002564 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	615a      	str	r2, [r3, #20]
}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	bc80      	pop	{r7}
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40000400 	.word	0x40000400

0800257c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f023 0201 	bic.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f023 030a 	bic.w	r3, r3, #10
 80025b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4313      	orrs	r3, r2
 80025c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	bf00      	nop
 80025d0:	371c      	adds	r7, #28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	f023 0210 	bic.w	r2, r3, #16
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002602:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	031b      	lsls	r3, r3, #12
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002614:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4313      	orrs	r3, r2
 800261e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	621a      	str	r2, [r3, #32]
}
 800262c:	bf00      	nop
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002636:	b480      	push	{r7}
 8002638:	b085      	sub	sp, #20
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	f043 0307 	orr.w	r3, r3, #7
 8002658:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	609a      	str	r2, [r3, #8]
}
 8002660:	bf00      	nop
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800266a:	b480      	push	{r7}
 800266c:	b087      	sub	sp, #28
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002684:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	021a      	lsls	r2, r3, #8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	431a      	orrs	r2, r3
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	4313      	orrs	r3, r2
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	609a      	str	r2, [r3, #8]
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026bc:	2302      	movs	r3, #2
 80026be:	e041      	b.n	8002744 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270c:	d004      	beq.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a10      	ldr	r2, [pc, #64]	; (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10c      	bne.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800271e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	4313      	orrs	r3, r2
 8002728:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40012c00 	.word	0x40012c00
 8002754:	40000400 	.word	0x40000400

08002758 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <__libc_init_array>:
 800277c:	b570      	push	{r4, r5, r6, lr}
 800277e:	2600      	movs	r6, #0
 8002780:	4d0c      	ldr	r5, [pc, #48]	; (80027b4 <__libc_init_array+0x38>)
 8002782:	4c0d      	ldr	r4, [pc, #52]	; (80027b8 <__libc_init_array+0x3c>)
 8002784:	1b64      	subs	r4, r4, r5
 8002786:	10a4      	asrs	r4, r4, #2
 8002788:	42a6      	cmp	r6, r4
 800278a:	d109      	bne.n	80027a0 <__libc_init_array+0x24>
 800278c:	f000 f822 	bl	80027d4 <_init>
 8002790:	2600      	movs	r6, #0
 8002792:	4d0a      	ldr	r5, [pc, #40]	; (80027bc <__libc_init_array+0x40>)
 8002794:	4c0a      	ldr	r4, [pc, #40]	; (80027c0 <__libc_init_array+0x44>)
 8002796:	1b64      	subs	r4, r4, r5
 8002798:	10a4      	asrs	r4, r4, #2
 800279a:	42a6      	cmp	r6, r4
 800279c:	d105      	bne.n	80027aa <__libc_init_array+0x2e>
 800279e:	bd70      	pop	{r4, r5, r6, pc}
 80027a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027a4:	4798      	blx	r3
 80027a6:	3601      	adds	r6, #1
 80027a8:	e7ee      	b.n	8002788 <__libc_init_array+0xc>
 80027aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ae:	4798      	blx	r3
 80027b0:	3601      	adds	r6, #1
 80027b2:	e7f2      	b.n	800279a <__libc_init_array+0x1e>
 80027b4:	08002810 	.word	0x08002810
 80027b8:	08002810 	.word	0x08002810
 80027bc:	08002810 	.word	0x08002810
 80027c0:	08002814 	.word	0x08002814

080027c4 <memset>:
 80027c4:	4603      	mov	r3, r0
 80027c6:	4402      	add	r2, r0
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d100      	bne.n	80027ce <memset+0xa>
 80027cc:	4770      	bx	lr
 80027ce:	f803 1b01 	strb.w	r1, [r3], #1
 80027d2:	e7f9      	b.n	80027c8 <memset+0x4>

080027d4 <_init>:
 80027d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d6:	bf00      	nop
 80027d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027da:	bc08      	pop	{r3}
 80027dc:	469e      	mov	lr, r3
 80027de:	4770      	bx	lr

080027e0 <_fini>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr
